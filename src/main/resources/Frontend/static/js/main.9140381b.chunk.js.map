{"version":3,"sources":["MainPage.js","App.js","serviceWorker.js","index.js"],"names":["MainPage","useState","Date","startDate","setStartDate","endDate","setEndDate","path","setPath","payload","formatDate","newPath","replace","endsWith","generatePath","date","cntDate","mnth","getMonth","slice","getDate","getFullYear","join","htmlFor","showPopperArrow","selected","dateFormat","onChange","type","value","e","target","onClick","alert","axios","post","then","res","data","App","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kRAKe,SAASA,IAAY,IAAD,EACGC,mBAAS,IAAIC,MADhB,mBACxBC,EADwB,KACbC,EADa,OAEDH,mBAAS,IAAIC,MAFZ,mBAExBG,EAFwB,KAEfC,EAFe,OAGLL,mBAAS,IAHJ,mBAGvBM,EAHuB,KAGjBC,EAHiB,KAKzBC,EAAU,CACZN,UAAWO,EAAWP,GACtBE,QAASK,EAAWL,GACpBE,KA0BJ,WACI,IAAII,EAAUJ,EAAKK,QAAQ,MAAM,QAC7BL,EAAKM,SAAS,UAGdF,GAAW,QAEf,OAAOA,EAjCDG,IAGV,SAASJ,EAAYK,GACjB,IAAIC,EAAU,IAAId,KAAKa,GACvBE,GAAQ,KAAOD,EAAQE,WAAa,IAAIC,OAAO,GAE/C,MAAO,EADA,IAAMH,EAAQI,WAAWD,OAAO,GAC1BF,EAAMF,EAAKM,eAAeC,KAAK,KAkChD,OACI,+BACI,4BACI,4BACI,2BAAOC,QAAQ,aAAf,cACI,kBAAC,IAAD,CAAYC,iBAAiB,EAAOC,SAAUtB,EAAWuB,WAAW,aAAaC,SAAU,SAAAZ,GAAI,OAAIX,EAAaW,QAGxH,4BACI,2BAAOQ,QAAQ,aAAf,YACI,kBAAC,IAAD,CAAYC,iBAAiB,EAAOC,SAAUpB,EAASqB,WAAW,aAAaC,SAAU,SAAAZ,GAAI,OAAIT,EAAWS,SAIxH,4BACI,2BAAOQ,QAAQ,QAAf,YACI,2BAAOK,KAAK,OAAOC,MAAOtB,EAAMoB,SA/ChD,SAA2BG,GACvBtB,EAAQsB,EAAEC,OAAOF,YAiDb,4BACI,4BAAQD,KAAK,SAASI,QA/ClC,SAAgCF,GACX,MAAb3B,GAAgC,MAAXE,EACrB4B,MAAM,mCAED9B,EAAYE,EACjB4B,MAAM,uCAkBVC,IAAMC,KAAK,0CAA2C1B,GACrD2B,MAAK,SAAAC,GAASJ,MAAMI,EAAIC,KAAK1B,QAAQ,QAAQ,YAuBtC,Y,IC7DD2B,E,uKARX,OACI,yBAAKC,UAAU,aACX,kBAACxC,EAAD,W,GAJMyC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9140381b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport axios from 'axios';\r\n\r\nexport default function MainPage() {\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [endDate, setEndDate] = useState(new Date());\r\n    const [ path, setPath ] = useState('');\r\n\r\n    const payload = {\r\n        startDate: formatDate(startDate),\r\n        endDate: formatDate(endDate),\r\n        path: generatePath(path),\r\n    }\r\n\r\n    function formatDate (date) {\r\n        var cntDate = new Date(date),\r\n        mnth = (\"0\" + (cntDate.getMonth() + 1)).slice(-2),\r\n        day = (\"0\" + cntDate.getDate()).slice(-2);\r\n        return [day, mnth, date.getFullYear()].join(\"-\");\r\n    }\r\n\r\n    function handleValueChage (e) {\r\n        setPath(e.target.value);\r\n    }\r\n\r\n    function validateFormAndSubmit (e) {\r\n        if (startDate == null || endDate == null) {\r\n            alert('StartDate or EndDate is missing');\r\n        }\r\n        else if (startDate > endDate) {\r\n            alert('StartDate must be less than EndDate'); \r\n        }\r\n        else {\r\n            postRequest();\r\n        }\r\n    }\r\n\r\n    function generatePath() {\r\n        var newPath = path.replace(/\\\\/g,\"\\\\\\\\\");\r\n        if (path.endsWith(\"\\\\\\\\\")) {\r\n        } \r\n        else {\r\n            newPath += \"\\\\\\\\\";\r\n        } \r\n        return newPath;\r\n    }\r\n\r\n    function postRequest () {\r\n        axios.post(\"http://localhost:8080/getPaymentDetails\", payload)\r\n        .then(res => { alert(res.data.replace(/\\\\\\\\/g,\"\\\\\"));});\r\n    }\r\n\r\n    return (\r\n        <table>\r\n            <tr>\r\n                <td>\r\n                    <label htmlFor=\"startDate\" > Start Date \r\n                        <DatePicker showPopperArrow={false} selected={startDate} dateFormat=\"dd/MM/yyyy\" onChange={date => setStartDate(date)} /> \r\n                    </label>\r\n                </td>\r\n                <td>\r\n                    <label htmlFor=\"startDate\" > End Date \r\n                        <DatePicker showPopperArrow={false} selected={endDate} dateFormat=\"dd/MM/yyyy\" onChange={date => setEndDate(date)} /> \r\n                    </label>            \r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <label htmlFor=\"path\">File Path\r\n                    <input type=\"text\" value={path} onChange={handleValueChage}/>\r\n                </label>\r\n            </tr>\r\n            <tr>\r\n                <button type=\"button\" onClick={validateFormAndSubmit}>Submit</button>\r\n            </tr>\r\n        </table>\r\n    );\r\n};","import React, { Component } from 'react';\nimport MainPage from './MainPage';\n\nclass App extends Component {\n    render() {\n    return (\n        <div className=\"container\">\n            <MainPage />\n        </div>\n    )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}